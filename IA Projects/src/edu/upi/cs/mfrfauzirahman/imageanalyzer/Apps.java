package edu.upi.cs.mfrfauzirahman.imageanalyzer;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.Raster;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteOrder;
import java.nio.IntBuffer;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import com.adobe.xmp.impl.ByteBuffer;
import com.drew.imaging.ImageMetadataReader;
import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.MetadataException;
import com.drew.metadata.Tag;
import com.drew.metadata.exif.ExifThumbnailDirectory;
import com.drew.tools.FileUtil;

import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageELA;
import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageMask;
import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageTools;

public class Apps extends JFrame {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */
	
	private Metadata metadata = null;
	private BufferedImage imgInput = null;
    private BufferedImage imgCompr = null;
    private BufferedImage imgELA = null;
    private BufferedImage imgMask = null;
    private BufferedImage imgThumb = null;
    
    private ImageIcon dispIcon = null;
    
    
    private File image = null;
    
    private byte[] imgBytes = null;
    
    private Image temp = null;
    
    private static final int[] MASK_RGB = ImageTools.MaskColor("CYAN");
    //private int DIFF_THRESH_DEF = 25;
    
    /**
     * Creates new form Apps
     */
    public Apps() {
    	setPreferredSize(new Dimension(1280, 720));
    	setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	labValQ = new JLabel();
    	labValQ.setText("95%");
    	labValM = new JLabel();
    	labValQ.setText("20%");
        TabPanel = new javax.swing.JTabbedPane();
        labInput = new javax.swing.JLabel();
        labInput.setHorizontalAlignment(SwingConstants.CENTER);
        labELA = new javax.swing.JLabel();
        labELA.setHorizontalAlignment(SwingConstants.CENTER);
        labMask = new javax.swing.JLabel();
        labMask.setHorizontalAlignment(SwingConstants.CENTER);
        TabConfig = new javax.swing.JTabbedPane();
        pConf = new javax.swing.JPanel();
        labQuality = new javax.swing.JLabel();
        sliderQuality = new javax.swing.JSlider();
        sliderQuality.setMinimum(1);
        sliderQuality.addChangeListener(new ChangeListener() {
        	@Override
			public void stateChanged(ChangeEvent e) {
        		updQVal();
        	}
        });
        labErrScale = new javax.swing.JLabel();
        sliderThresh = new javax.swing.JSlider();
        sliderThresh.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		updMVal();
        	}
        });
        sliderThresh.setMaximum(255);
        TabThumbnail = new javax.swing.JTabbedPane();
        MenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mOpen = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digital Image Forensics Tools");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(1024, 720));
        setName("frameMain");
        setSize(new java.awt.Dimension(1280, 720));

        TabPanel.addTab("Input", labInput);
        
        labComp = new JLabel("");
        TabPanel.addTab("Comp", null, labComp, null);
        TabPanel.addTab("ELA", labELA);
        TabPanel.addTab("Mask", labMask);

        labQuality.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labQuality.setText("JPEG Quality");

        sliderQuality.setValue(95);

        labErrScale.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labErrScale.setText("Mask Threshold");
        
        JButton btnConfig = new JButton("Apply");
        btnConfig.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		try {
					applyConfig();
				} catch (ImageProcessingException | IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        
        JButton btnDefault = new JButton("Default");
        btnDefault.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		defaultConfig();
        	}
        });

        TabConfig.addTab("Config", pConf);
        GroupLayout gl_pConf = new GroupLayout(pConf);
        gl_pConf.setHorizontalGroup(
        	gl_pConf.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_pConf.createSequentialGroup()
        			.addGap(10)
        			.addGroup(gl_pConf.createParallelGroup(Alignment.LEADING)
        				.addGroup(gl_pConf.createSequentialGroup()
        					.addComponent(labQuality)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(labValQ))
        				.addComponent(sliderQuality, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE)
        				.addGroup(gl_pConf.createSequentialGroup()
        					.addComponent(labErrScale)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(labValM))
        				.addComponent(sliderThresh, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE)
        				.addGroup(gl_pConf.createSequentialGroup()
        					.addComponent(btnConfig)
        					.addGap(6)
        					.addComponent(btnDefault))))
        );
        gl_pConf.setVerticalGroup(
        	gl_pConf.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_pConf.createSequentialGroup()
        			.addGap(11)
        			.addGroup(gl_pConf.createParallelGroup(Alignment.BASELINE)
        				.addComponent(labQuality)
        				.addComponent(labValQ))
        			.addGap(18)
        			.addComponent(sliderQuality, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(22)
        			.addGroup(gl_pConf.createParallelGroup(Alignment.BASELINE)
        				.addComponent(labErrScale)
        				.addComponent(labValM))
        			.addGap(11)
        			.addComponent(sliderThresh, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(6)
        			.addGroup(gl_pConf.createParallelGroup(Alignment.LEADING)
        				.addComponent(btnConfig)
        				.addComponent(btnDefault)))
        );
        pConf.setLayout(gl_pConf);

        menuFile.setText("File");

        mOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mOpen.setText("Open Image");
        mOpen.setToolTipText("");
        mOpen.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                mOpenIMG(evt);
            }
        });
        menuFile.add(mOpen);

        MenuBar.add(menuFile);
        
        mntmSaveEla = new JMenuItem("Save ELA");
        menuFile.add(mntmSaveEla);
        
        mntmSaveMaskedImage = new JMenuItem("Save Masked Image");
        menuFile.add(mntmSaveMaskedImage);

        setJMenuBar(MenuBar);
        
        JTabbedPane tabbedPane = new JTabbedPane(SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(TabPanel, GroupLayout.PREFERRED_SIZE, 1010, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(TabConfig, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
        				.addComponent(TabThumbnail, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
        				.addComponent(tabbedPane, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE))
        			.addGap(3))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(TabConfig, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(TabThumbnail, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        		.addComponent(TabPanel, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        
        labThumb = new JLabel((String) null);
        labThumb.setHorizontalAlignment(SwingConstants.CENTER);
        TabThumbnail.addTab("Thumbnail", null, labThumb, null);
        
        JPanel pDetails = new JPanel();
        tabbedPane.addTab("Details", null, pDetails, null);
        getContentPane().setLayout(layout);
        
        spMetadata = new JScrollPane();
        spMetadata.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        TabPanel.addTab("Metadata", null, spMetadata, null);
        
        tMetadata = new JTable(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null},
        	},
        	new String[] {
        		"Directory", "Tag Name", "Value"
        	}
          ) {
        	@Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }
        });
        
        tMetadata.getColumnModel().getColumn(0).setPreferredWidth(75);
        tMetadata.getColumnModel().getColumn(0).setMaxWidth(100);
        tMetadata.getColumnModel().getColumn(1).setPreferredWidth(100);
        tMetadata.getColumnModel().getColumn(1).setMaxWidth(200);
        tMetadata.getColumnModel().getColumn(1).setMinWidth(200);
        
        spMetadata.setViewportView(tMetadata);
        
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, s	tay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
			public void run() {
                new Apps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JMenuBar MenuBar;
    private javax.swing.JTabbedPane TabConfig;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JTabbedPane TabThumbnail;
    private javax.swing.JLabel labELA;
    private javax.swing.JLabel labErrScale;
    private javax.swing.JLabel labInput;
    private javax.swing.JLabel labMask;
    private javax.swing.JLabel labQuality;
    private javax.swing.JMenuItem mOpen;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPanel pConf;
    private javax.swing.JSlider sliderQuality;
    private javax.swing.JSlider sliderThresh;
    private JScrollPane spMetadata;
    private JTable tMetadata;
    private JMenuItem mntmSaveEla;
    private JMenuItem mntmSaveMaskedImage;
    private JLabel labValQ;
    private JLabel labValM;
    private JLabel labThumb;
    private JLabel labComp;
    
    /**
     * Application Methods
     */
    void mOpenIMG(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mOpenIMGActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Image Files (JPG/JPEG/PNG)", "jpg", "jpeg", "png"));
        int result = fc.showOpenDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
            image = fc.getSelectedFile();
            try {
				imgBytes = Files.readAllBytes(image.toPath());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            
            try {
                imgInput = ImageIO.read(image);
                applyConfig();
            } catch (IOException | ImageProcessingException ex) {
                Logger.getLogger(Apps.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
            	DefaultTableModel tablemodel = null;
            	metadata = ImageMetadataReader.readMetadata(image);
                writeTable(metadata, tMetadata, tablemodel);
            } catch (IOException | ImageProcessingException ex) {
                Logger.getLogger(Apps.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
				setThumbnails();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            
        }
        
        
        
    }//GEN-LAST:event_mOpenIMGActionPerformed
        
    public void runAnalysis(float compLevel, int threshold) throws IOException, ImageProcessingException{   	
        int imgWidth = imgInput.getWidth();
        int labWidth = labInput.getWidth();
        int imgHeight = imgInput.getHeight();
        int labHeight = labInput.getHeight();
        double ratio = 0;
        
        if(imgWidth > labWidth && imgWidth > imgHeight) {
        	ratio = ((double) labWidth) / ((double) imgWidth);
        	imgWidth = (int) (imgWidth * ratio);
        	imgHeight = (int) (imgHeight * ratio);
        }else       	
        if(imgHeight > labHeight){
        	ratio = ((double) labHeight) / ((double) imgHeight);
        	imgWidth = (int) (imgWidth * ratio);
        	imgHeight = (int) (imgHeight * ratio);
        }
        
        temp = imgInput.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        dispIcon = new ImageIcon(temp);
        labInput.setIcon(dispIcon);
        
        if(compLevel != 1) {
        	imgCompr = ImageELA.GetCompressedImage(imgInput, compLevel);
        }else {
        	imgCompr = imgInput;
        }
        temp = imgCompr.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        dispIcon = new ImageIcon(temp);
        labComp.setIcon(dispIcon);
        
        imgELA = ImageELA.GetDifferenceImage(imgInput, imgCompr);
        temp = imgELA.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        dispIcon = new ImageIcon(temp);
        labELA.setIcon(dispIcon);
        
        imgMask = ImageMask.MaskImages(imgInput, imgELA, MASK_RGB, threshold);
        temp = imgMask.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        dispIcon = new ImageIcon(temp);
        labMask.setIcon(dispIcon);
               
        
    }
    
    public void setThumbnails() throws IOException {
    	ExifThumbnailDirectory thumbdir = metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class);
        
        if(thumbdir != null) {
            int thumbstart = 0;
            int thumblen = 0;
			try {
				thumbstart = thumbdir.getInt(ExifThumbnailDirectory.TAG_THUMBNAIL_OFFSET);
				thumblen = thumbdir.getInt(ExifThumbnailDirectory.TAG_THUMBNAIL_LENGTH);
			
				
				System.out.println(thumbstart);

				imgThumb = new BufferedImage(160, 106, BufferedImage.TYPE_INT_RGB);
				imgThumb.setData(Raster.createRaster(imgThumb.getSampleModel(), new DataBufferByte(imgBytes, thumblen, thumbstart), new Point() ) );
				
				System.out.print(imgThumb);
				dispIcon = new ImageIcon(imgThumb);
	            labThumb.setIcon(dispIcon);
				if(imgThumb == null) {
		        	labThumb.setIcon(FileSystemView.getFileSystemView().getSystemIcon(image));
		        }
			} catch (MetadataException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }
    
    public void writeTable(Metadata metadata, JTable tMetadata, DefaultTableModel tmodel) throws ImageProcessingException, IOException {    	tmodel = (DefaultTableModel) tMetadata.getModel();
    	tmodel.setRowCount(0);
    	TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tMetadata.getModel());
        tMetadata.setRowSorter(sorter);
        
        for (Directory directory : metadata.getDirectories()) {
            for (Tag tag : directory.getTags()) {
            	tmodel.addRow(new Object[]{directory.getName(), tag.getTagName(), tag.getDescription()});
            }
        }
    }
    
    public void applyConfig() throws ImageProcessingException, IOException {
    	labELA.setIcon(null);
    	float compLevel = (float) sliderQuality.getValue() / 100;
    	int threshold = sliderThresh.getValue();
    	runAnalysis(compLevel, threshold);
    }
    
    public void defaultConfig() {
    	sliderQuality.setValue(88);
    	sliderThresh.setValue(25);
    	try {
			runAnalysis(0.88f, 25);
		} catch (ImageProcessingException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public void updQVal() {
    	sliderQuality.setToolTipText(String.valueOf(sliderQuality.getValue()));   	
    	labValQ.setText(String.valueOf(sliderQuality.getValue())+"%");
    }
    public void updMVal() {
    	sliderThresh.setToolTipText(String.valueOf(sliderThresh.getValue()));
    	labValM.setText(String.valueOf(sliderThresh.getValue()));
    }
}