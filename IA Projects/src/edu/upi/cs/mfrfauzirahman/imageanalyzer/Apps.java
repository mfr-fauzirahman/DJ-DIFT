package edu.upi.cs.mfrfauzirahman.imageanalyzer;


import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;

import com.drew.imaging.ImageMetadataReader;
import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import com.drew.metadata.exif.ExifThumbnailDirectory;

import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageELA;
import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageMask;
import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ImageTools;
import edu.upi.cs.mfrfauzirahman.imageanalyzer.utilities.ComboItem;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import javax.swing.JSeparator;


public class Apps extends JFrame {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 
	 */
	
	public File input = null;
	private String path = null;
	public File outputfile = null;
	public double fileSize = 0;
	
	private int taskType = 0;
	private Task taskEla;
	private Task taskMask;
	
	public static int[] MASK_RGB = ImageTools.MaskColor("RED");
	public static int errLevel = 20;
	public static int qualityLevel = 95;
	public static int maskThreshold = 25;
	public static String imgFormat = null;
	
	public Image img = null;
	public Metadata metadata = null;
	public BufferedImage imgInput = null;
    private BufferedImage imgRecomp = null;
    private BufferedImage imgELA = null;
    private BufferedImage imgMask = null;
    private BufferedImage imgThumb = null;
	private ImageIcon imgIco = null;
	
	public boolean thumbExists = false;
	public int thumbWidth = 0;
	public int thumbHeight = 0;
	public int thumbLen = 0;
	
	public int imgWidth = 0;
	public final int labWidth = 1005;
	public int imgHeight = 0;
	public final int labHeight = 642;
	
	public static final long KILO_BYTES = 1024;
	public static final long MEGA_BYTES = 1024 * KILO_BYTES;
    
    
    /**
     * Creates new form Apps
     */
    public Apps() {
    	addWindowListener(new WindowAdapter() {
    		@Override
    		public void windowClosing(WindowEvent e) {
    			clearTemp();
    		}
    	});
    	setPreferredSize(new Dimension(1280, 720));
    	setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	labValQ = new JLabel();
    	labValQ.setBounds(114, 17, 50, 14);
    	labValQ.setText("95%");
    	labValQ.setText("20%");
        TabPanel = new javax.swing.JTabbedPane();
        TabPanel.setBounds(0, 0, 1010, 670);
        labInput = new javax.swing.JLabel();
        labInput.setHorizontalAlignment(SwingConstants.CENTER);
        TabConfig = new javax.swing.JTabbedPane();
        TabConfig.setBounds(1016, 470, 255, 200);
        pConfELA = new javax.swing.JPanel();
        labQuality = new javax.swing.JLabel();
        labQuality.setBounds(10, 11, 94, 22);
        sliderQuality = new javax.swing.JSlider();
        sliderQuality.setBounds(10, 44, 230, 22);
        sliderQuality.setMinimum(1);
        sliderQuality.addChangeListener(new ChangeListener() {
        	@Override
			public void stateChanged(ChangeEvent e) {
        		updQVal();
        	}
        });
        MenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mOpen = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digital Image Forensics Tools");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(1024, 720));
        setName("frameMain");
        setSize(new java.awt.Dimension(1280, 720));

        TabPanel.addTab("Input", labInput);
        labELA = new javax.swing.JLabel();
        labELA.setHorizontalAlignment(SwingConstants.CENTER);
        TabPanel.addTab("Error Level Analysis", labELA);
        
        labComp = new JLabel("");
        labComp.setHorizontalAlignment(SwingConstants.CENTER);
        TabPanel.addTab("Re-compressed", null, labComp, null);
        labMask = new javax.swing.JLabel();
        labMask.setHorizontalAlignment(SwingConstants.CENTER);
        TabPanel.addTab("Masked Image", labMask);
        
        labThumbBig = new JLabel();
        labThumbBig.setHorizontalTextPosition(SwingConstants.CENTER);
        labThumbBig.setHorizontalAlignment(SwingConstants.CENTER);
        TabPanel.addTab("Thumbnail (Large)", null, labThumbBig, null);

        labQuality.setFont(new Font("Tahoma", Font.PLAIN, 14)); // NOI18N
        labQuality.setText("JPEG Quality");

        sliderQuality.setValue(95);
        
        JButton btnConfELA = new JButton("Apply");
        btnConfELA.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					applyConfigELA();
				} catch (ImageProcessingException e1) {
					e1.printStackTrace();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        btnConfELA.setBounds(10, 135, 59, 23);
        btnConfELA.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		try {
					applyConfigELA();
				} catch (ImageProcessingException | IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        
        JButton btnDefELA = new JButton("Default");
        btnDefELA.setBounds(173, 135, 67, 23);
        btnDefELA.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		defConfigELA();
        	}
        });

        TabConfig.addTab("Config (ELA)", pConfELA);
        
        labErrScale = new JLabel();
        labErrScale.setBounds(10, 69, 94, 22);
        labErrScale.setText("Error Scale");
        labErrScale.setFont(new Font("Tahoma", Font.PLAIN, 14));
        
        sliderErrScale = new JSlider();
        sliderErrScale.setMinimum(1);
        sliderErrScale.setValue(20);
        sliderErrScale.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		updErrVal();
        	}
        });
        sliderErrScale.setBounds(10, 102, 230, 22);
        pConfELA.setLayout(null);
        pConfELA.add(labQuality);
        pConfELA.add(labValQ);
        pConfELA.add(sliderErrScale);
        pConfELA.add(sliderQuality);
        pConfELA.add(labErrScale);
        pConfELA.add(btnConfELA);
        pConfELA.add(btnDefELA);
        
        labValE = new JLabel();
        labValE.setText("20%");
        labValE.setBounds(114, 77, 50, 14);
        pConfELA.add(labValE);

        menuFile.setText("File");

        mOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mOpen.setText("Open Image");
        mOpen.setToolTipText("");
        mOpen.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                mOpenIMG(evt);
            }
        });
        menuFile.add(mOpen);

        MenuBar.add(menuFile);
        
        mntmSaveRecomp = new JMenuItem("Save Recompressed Image");
        mntmSaveRecomp.setEnabled(false);
        mntmSaveRecomp.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		mSaveRecompIMG(e);
        	}
        });
        
        separator = new JSeparator();
        menuFile.add(separator);
        menuFile.add(mntmSaveRecomp);
        
        mntmSaveEla = new JMenuItem("Save ELA Result");
        mntmSaveEla.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		mSaveElaIMG(e);
        	}
        });
        mntmSaveEla.setEnabled(false);
        menuFile.add(mntmSaveEla);
        
        mntmSaveMaskedImage = new JMenuItem("Save Masked Image");
        mntmSaveMaskedImage.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		mSaveMaskedIMG(e);
        	}
        });
        mntmSaveMaskedImage.setEnabled(false);
        menuFile.add(mntmSaveMaskedImage);
        
        mntmSaveThumbnail = new JMenuItem("Save Thumbnail Image");
        mntmSaveThumbnail.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		mSaveThumbIMG(e);
        	}
        });
        mntmSaveThumbnail.setEnabled(false);
        menuFile.add(mntmSaveThumbnail);
        
        mntmSaveMetadata = new JMenuItem("Save Metadata");
        mntmSaveMetadata.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		mSaveMetadata(e);
        	}
        });
        mntmSaveMetadata.setEnabled(false);
        menuFile.add(mntmSaveMetadata);

        setJMenuBar(MenuBar);
        
        JTabbedPane TabAnalysis = new JTabbedPane(SwingConstants.TOP);
        TabAnalysis.setBounds(1016, 0, 255, 245);
        
        TabThumb = new JTabbedPane(JTabbedPane.TOP);
        TabThumb.setBounds(1016, 297, 255, 167);
        
        labThumbSmall = new JLabel("");
        labThumbSmall.setHorizontalAlignment(SwingConstants.CENTER);
        TabThumb.addTab("Thumbnail (Small)", null, labThumbSmall, null);
        
        pConfMask = new JPanel();
        pConfMask.setLayout(null);
        TabConfig.addTab("Config (Mask)", null, pConfMask, null);
        
        labMaskThresh = new JLabel();
        labMaskThresh.setText("Mask Threshold");
        labMaskThresh.setFont(new Font("Tahoma", Font.PLAIN, 14));
        labMaskThresh.setBounds(10, 11, 94, 22);
        pConfMask.add(labMaskThresh);
        
        labValT = new JLabel();
        labValT.setText("25");
        labValT.setBounds(114, 17, 126, 14);
        pConfMask.add(labValT);
        
        sliderThresh = new JSlider();
        sliderThresh.addChangeListener(new ChangeListener() {
        	public void stateChanged(ChangeEvent e) {
        		updTVal();
        	}
        });
        sliderThresh.setMaximum(255);
        sliderThresh.setValue(25);
        sliderThresh.setMinimum(1);
        sliderThresh.setBounds(10, 44, 230, 22);
        pConfMask.add(sliderThresh);
        
        lblMaskColor = new JLabel();
        lblMaskColor.setText("Mask Color");
        lblMaskColor.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblMaskColor.setBounds(10, 69, 94, 22);
        pConfMask.add(lblMaskColor);
        
        btnConfMask = new JButton("Apply");
        btnConfMask.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		applyMask();
        	}
        });
        btnConfMask.setBounds(10, 133, 59, 23);
        pConfMask.add(btnConfMask);
        
        btnDefMask = new JButton("Default");
        btnDefMask.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent e) {
        		defMask();
        	}
        });
        btnDefMask.setBounds(173, 133, 67, 23);
        pConfMask.add(btnDefMask);
        
        comboMaskCol = new JComboBox<ComboItem>();
        comboMaskCol.addItemListener(new ItemListener() {
        	public void itemStateChanged(ItemEvent e) {
        		maskColorChange();
        	}
        });
        comboMaskCol.setBounds(10, 102, 230, 20);
        comboMaskCol.addItem(new ComboItem("Cyan", ImageTools.MaskColor("CYAN")));
        comboMaskCol.addItem(new ComboItem("Magenta", ImageTools.MaskColor("MAGENTA")));
        comboMaskCol.addItem(new ComboItem("Yellow", ImageTools.MaskColor("YELLOW")));
        comboMaskCol.setSelectedIndex(0);
        pConfMask.add(comboMaskCol);
        
        JPanel pDetails = new JPanel();
        TabAnalysis.addTab("Details", null, pDetails, null);
        
        lblFileSize = new JLabel("File size");
        lblFileSize.setBounds(10, 31, 37, 14);
        
        lblResolution = new JLabel("Resolution");
        lblResolution.setBounds(10, 52, 50, 14);
        
        lblPath = new JLabel("Path");
        lblPath.setBounds(10, 121, 22, 14);
        
        labResoVal = new JLabel("-");
        labResoVal.setBounds(66, 52, 174, 14);
        
        labFileSizeVal = new JLabel("-");
        labFileSizeVal.setBounds(66, 31, 174, 15);
        
        labFileNameVal = new JLabel("-");
        labFileNameVal.setBounds(66, 11, 174, 14);
        
        txtaPath = new JTextArea();
        txtaPath.setWrapStyleWord(true);
        txtaPath.setFont(UIManager.getFont("Label.font"));
        txtaPath.setLineWrap(true);
        txtaPath.setEditable(false);
        txtaPath.setBackground(UIManager.getColor("Button.background"));
        txtaPath.setBounds(66, 119, 174, 85);
        
        labFile = new JLabel("File name");
        labFile.setBounds(10, 11, 45, 14);
        pDetails.setLayout(null);
        pDetails.add(lblResolution);
        pDetails.add(lblFileSize);
        pDetails.add(lblPath);
        pDetails.add(labResoVal);
        pDetails.add(labFileNameVal);
        pDetails.add(labFileSizeVal);
        pDetails.add(txtaPath);
        pDetails.add(labFile);
        
        lblThumbnail = new JLabel("Thumbnail");
        lblThumbnail.setBounds(10, 73, 50, 14);
        pDetails.add(lblThumbnail);
        
        labThumbStatus = new JLabel("-");
        labThumbStatus.setBounds(66, 73, 78, 14);
        pDetails.add(labThumbStatus);
        
        lblThumbSize = new JLabel("Th. Size");
        lblThumbSize.setBounds(10, 94, 50, 14);
        pDetails.add(lblThumbSize);
        
        labThumbBytes = new JLabel("-");
        labThumbBytes.setBounds(66, 94, 174, 14);
        pDetails.add(labThumbBytes);
        
        pStatisticsInput = new JPanel();
        TabAnalysis.addTab("Input", null, pStatisticsInput, null);
        
        lblMinChannel = new JLabel("Min - Max Channel (Red)");
        lblMinChannel.setBounds(10, 11, 146, 14);
        pStatisticsInput.setLayout(null);
        pStatisticsInput.add(lblMinChannel);
        
        labInMinR = new JLabel("0");
        labInMinR.setHorizontalAlignment(SwingConstants.CENTER);
        labInMinR.setBounds(166, 11, 18, 14);
        pStatisticsInput.add(labInMinR);
        
        labInMaxR = new JLabel("0");
        labInMaxR.setHorizontalAlignment(SwingConstants.CENTER);
        labInMaxR.setBounds(222, 11, 18, 14);
        pStatisticsInput.add(labInMaxR);
        
        lblMaxChannelr = new JLabel("Min - Max Channel (Green)");
        lblMaxChannelr.setBounds(10, 36, 146, 14);
        pStatisticsInput.add(lblMaxChannelr);
        
        lblMinMagnitude = new JLabel("Min - Max Channel (Blue)");
        lblMinMagnitude.setBounds(10, 61, 146, 14);
        pStatisticsInput.add(lblMinMagnitude);
        
        labInMinB = new JLabel("0");
        labInMinB.setHorizontalAlignment(SwingConstants.CENTER);
        labInMinB.setBounds(166, 61, 18, 14);
        pStatisticsInput.add(labInMinB);
        
        labInAvgMag = new JLabel("0");
        labInAvgMag.setHorizontalAlignment(SwingConstants.CENTER);
        labInAvgMag.setBounds(166, 161, 74, 14);
        pStatisticsInput.add(labInAvgMag);
        
        label_15 = new JLabel("-");
        label_15.setHorizontalAlignment(SwingConstants.CENTER);
        label_15.setBounds(194, 61, 18, 14);
        pStatisticsInput.add(label_15);
        
        label_1 = new JLabel("Min - Max Magnitude");
        label_1.setBounds(10, 86, 146, 14);
        pStatisticsInput.add(label_1);
        
        labInMinMag = new JLabel("0");
        labInMinMag.setHorizontalAlignment(SwingConstants.CENTER);
        labInMinMag.setBounds(166, 86, 18, 14);
        pStatisticsInput.add(labInMinMag);
        
        label_11 = new JLabel("-");
        label_11.setHorizontalAlignment(SwingConstants.CENTER);
        label_11.setBounds(194, 86, 18, 14);
        pStatisticsInput.add(label_11);
        
        labInMaxMag = new JLabel("0");
        labInMaxMag.setHorizontalAlignment(SwingConstants.CENTER);
        labInMaxMag.setBounds(222, 86, 18, 14);
        pStatisticsInput.add(labInMaxMag);
        
        label = new JLabel("-");
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setBounds(194, 11, 18, 14);
        pStatisticsInput.add(label);
        
        label_20 = new JLabel("-");
        label_20.setHorizontalAlignment(SwingConstants.CENTER);
        label_20.setBounds(194, 36, 18, 14);
        pStatisticsInput.add(label_20);
        
        labIn = new JLabel("Average Magnitude");
        labIn.setBounds(10, 161, 146, 14);
        pStatisticsInput.add(labIn);
        
        labInMaxG = new JLabel("0");
        labInMaxG.setHorizontalAlignment(SwingConstants.CENTER);
        labInMaxG.setBounds(222, 36, 18, 14);
        pStatisticsInput.add(labInMaxG);
        
        labInMaxB = new JLabel("0");
        labInMaxB.setHorizontalAlignment(SwingConstants.CENTER);
        labInMaxB.setBounds(222, 61, 18, 14);
        pStatisticsInput.add(labInMaxB);
        
        labInMinG = new JLabel("0");
        labInMinG.setHorizontalAlignment(SwingConstants.CENTER);
        labInMinG.setBounds(166, 36, 18, 14);
        pStatisticsInput.add(labInMinG);
        
        lblAverageValuer = new JLabel("Average Value (R, G, B)");
        lblAverageValuer.setBounds(10, 111, 230, 14);
        pStatisticsInput.add(lblAverageValuer);
        
        labInAvgR = new JLabel("0");
        labInAvgR.setHorizontalAlignment(SwingConstants.CENTER);
        labInAvgR.setBounds(10, 136, 70, 14);
        pStatisticsInput.add(labInAvgR);
        
        labInAvgG = new JLabel("0");
        labInAvgG.setHorizontalAlignment(SwingConstants.CENTER);
        labInAvgG.setBounds(90, 136, 70, 14);
        pStatisticsInput.add(labInAvgG);
        
        labInAvgB = new JLabel("0");
        labInAvgB.setHorizontalAlignment(SwingConstants.CENTER);
        labInAvgB.setBounds(170, 136, 70, 14);
        pStatisticsInput.add(labInAvgB);
        
        panel = new JPanel();
        panel.setLayout(null);
        TabAnalysis.addTab("Recompressed", null, panel, null);
        
        label_2 = new JLabel("Min - Max Channel (Red)");
        label_2.setBounds(10, 11, 146, 14);
        panel.add(label_2);
        
        labRecMinR = new JLabel("0");
        labRecMinR.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMinR.setBounds(166, 11, 18, 14);
        panel.add(labRecMinR);
        
        labRecMaxR = new JLabel("0");
        labRecMaxR.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMaxR.setBounds(222, 11, 18, 14);
        panel.add(labRecMaxR);
        
        label_5 = new JLabel("Min - Max Channel (Green)");
        label_5.setBounds(10, 36, 146, 14);
        panel.add(label_5);
        
        label_6 = new JLabel("Min - Max Channel (Blue)");
        label_6.setBounds(10, 61, 146, 14);
        panel.add(label_6);
        
        labRecMinB = new JLabel("0");
        labRecMinB.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMinB.setBounds(166, 61, 18, 14);
        panel.add(labRecMinB);
        
        labRecAvgMag = new JLabel("0");
        labRecAvgMag.setHorizontalAlignment(SwingConstants.CENTER);
        labRecAvgMag.setBounds(166, 161, 74, 14);
        panel.add(labRecAvgMag);
        
        label_9 = new JLabel("-");
        label_9.setHorizontalAlignment(SwingConstants.CENTER);
        label_9.setBounds(194, 61, 18, 14);
        panel.add(label_9);
        
        label_10 = new JLabel("Min - Max Magnitude");
        label_10.setBounds(10, 86, 146, 14);
        panel.add(label_10);
        
        labRecMinMag = new JLabel("0");
        labRecMinMag.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMinMag.setBounds(166, 86, 18, 14);
        panel.add(labRecMinMag);
        
        label_13 = new JLabel("-");
        label_13.setHorizontalAlignment(SwingConstants.CENTER);
        label_13.setBounds(194, 86, 18, 14);
        panel.add(label_13);
        
        labRecMaxMag = new JLabel("0");
        labRecMaxMag.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMaxMag.setBounds(222, 86, 18, 14);
        panel.add(labRecMaxMag);
        
        label_16 = new JLabel("-");
        label_16.setHorizontalAlignment(SwingConstants.CENTER);
        label_16.setBounds(194, 11, 18, 14);
        panel.add(label_16);
        
        label_17 = new JLabel("-");
        label_17.setHorizontalAlignment(SwingConstants.CENTER);
        label_17.setBounds(194, 36, 18, 14);
        panel.add(label_17);
        
        label_18 = new JLabel("Average Magnitude");
        label_18.setBounds(10, 161, 146, 14);
        panel.add(label_18);
        
        labRecMaxG = new JLabel("0");
        labRecMaxG.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMaxG.setBounds(222, 36, 18, 14);
        panel.add(labRecMaxG);
        
        labRecMaxB = new JLabel("0");
        labRecMaxB.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMaxB.setBounds(222, 61, 18, 14);
        panel.add(labRecMaxB);
        
        labRecMinG = new JLabel("0");
        labRecMinG.setHorizontalAlignment(SwingConstants.CENTER);
        labRecMinG.setBounds(166, 36, 18, 14);
        panel.add(labRecMinG);
        
        label_23 = new JLabel("Average Value (R, G, B)");
        label_23.setBounds(10, 111, 230, 14);
        panel.add(label_23);
        
        labRecAvgR = new JLabel("0");
        labRecAvgR.setHorizontalAlignment(SwingConstants.CENTER);
        labRecAvgR.setBounds(10, 136, 70, 14);
        panel.add(labRecAvgR);
        
        labRecAvgG = new JLabel("0");
        labRecAvgG.setHorizontalAlignment(SwingConstants.CENTER);
        labRecAvgG.setBounds(90, 136, 70, 14);
        panel.add(labRecAvgG);
        
        labRecAvgB = new JLabel("0");
        labRecAvgB.setHorizontalAlignment(SwingConstants.CENTER);
        labRecAvgB.setBounds(170, 136, 70, 14);
        panel.add(labRecAvgB);
        
        pStatisticsELA = new JPanel();
        pStatisticsELA.setLayout(null);
        TabAnalysis.addTab("Statistics (ELA)", null, pStatisticsELA, null);
        
        label_27 = new JLabel("Min - Max Channel (Red)");
        label_27.setBounds(10, 11, 146, 14);
        pStatisticsELA.add(label_27);
        
        labElaMinR = new JLabel("0");
        labElaMinR.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMinR.setBounds(166, 11, 18, 14);
        pStatisticsELA.add(labElaMinR);
        
        labElaMaxR = new JLabel("0");
        labElaMaxR.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMaxR.setBounds(222, 11, 18, 14);
        pStatisticsELA.add(labElaMaxR);
        
        label_30 = new JLabel("Min - Max Channel (Green)");
        label_30.setBounds(10, 36, 146, 14);
        pStatisticsELA.add(label_30);
        
        label_31 = new JLabel("Min - Max Channel (Blue)");
        label_31.setBounds(10, 61, 146, 14);
        pStatisticsELA.add(label_31);
        
        labElaMinB = new JLabel("0");
        labElaMinB.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMinB.setBounds(166, 61, 18, 14);
        pStatisticsELA.add(labElaMinB);
        
        labElaAvgMag = new JLabel("0");
        labElaAvgMag.setHorizontalAlignment(SwingConstants.CENTER);
        labElaAvgMag.setBounds(166, 161, 74, 14);
        pStatisticsELA.add(labElaAvgMag);
        
        label_34 = new JLabel("-");
        label_34.setHorizontalAlignment(SwingConstants.CENTER);
        label_34.setBounds(194, 61, 18, 14);
        pStatisticsELA.add(label_34);
        
        label_35 = new JLabel("Min - Max Magnitude");
        label_35.setBounds(10, 86, 146, 14);
        pStatisticsELA.add(label_35);
        
        labElaMinMag = new JLabel("0");
        labElaMinMag.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMinMag.setBounds(166, 86, 18, 14);
        pStatisticsELA.add(labElaMinMag);
        
        label_37 = new JLabel("-");
        label_37.setHorizontalAlignment(SwingConstants.CENTER);
        label_37.setBounds(194, 86, 18, 14);
        pStatisticsELA.add(label_37);
        
        labElaMaxMag = new JLabel("0");
        labElaMaxMag.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMaxMag.setBounds(222, 86, 18, 14);
        pStatisticsELA.add(labElaMaxMag);
        
        label_39 = new JLabel("-");
        label_39.setHorizontalAlignment(SwingConstants.CENTER);
        label_39.setBounds(194, 11, 18, 14);
        pStatisticsELA.add(label_39);
        
        label_40 = new JLabel("-");
        label_40.setHorizontalAlignment(SwingConstants.CENTER);
        label_40.setBounds(194, 36, 18, 14);
        pStatisticsELA.add(label_40);
        
        label_41 = new JLabel("Average Magnitude");
        label_41.setBounds(10, 161, 146, 14);
        pStatisticsELA.add(label_41);
        
        labElaMaxG = new JLabel("0");
        labElaMaxG.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMaxG.setBounds(222, 36, 18, 14);
        pStatisticsELA.add(labElaMaxG);
        
        labElaMaxB = new JLabel("0");
        labElaMaxB.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMaxB.setBounds(222, 61, 18, 14);
        pStatisticsELA.add(labElaMaxB);
        
        labElaMinG = new JLabel("0");
        labElaMinG.setHorizontalAlignment(SwingConstants.CENTER);
        labElaMinG.setBounds(166, 36, 18, 14);
        pStatisticsELA.add(labElaMinG);
        
        label_45 = new JLabel("Average Value (R, G, B)");
        label_45.setBounds(10, 111, 146, 14);
        pStatisticsELA.add(label_45);
        
        labElaAvgR = new JLabel("0");
        labElaAvgR.setHorizontalAlignment(SwingConstants.CENTER);
        labElaAvgR.setHorizontalTextPosition(SwingConstants.CENTER);
        labElaAvgR.setBounds(10, 136, 70, 14);
        pStatisticsELA.add(labElaAvgR);
        
        labElaAvgB = new JLabel("0");
        labElaAvgB.setHorizontalAlignment(SwingConstants.CENTER);
        labElaAvgB.setHorizontalTextPosition(SwingConstants.CENTER);
        labElaAvgB.setBounds(170, 136, 70, 14);
        pStatisticsELA.add(labElaAvgB);
        
        labElaAvgG = new JLabel("0");
        labElaAvgG.setHorizontalTextPosition(SwingConstants.CENTER);
        labElaAvgG.setHorizontalAlignment(SwingConstants.CENTER);
        labElaAvgG.setBounds(90, 136, 70, 14);
        pStatisticsELA.add(labElaAvgG);
        
        spMetadata = new JScrollPane();
        spMetadata.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        TabPanel.addTab("Metadata Table", null, spMetadata, null);
        
        tMetadata = new JTable(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null},
        	},
        	new String[] {
        		"Directory", "Tag Name", "Value"
        	}
          ) {
        	@Override
            public boolean isCellEditable(int row, int column) {
               return false;
            }
        });
        
        tMetadata.getColumnModel().getColumn(0).setPreferredWidth(75);
        tMetadata.getColumnModel().getColumn(0).setMaxWidth(100);
        tMetadata.getColumnModel().getColumn(1).setPreferredWidth(100);
        tMetadata.getColumnModel().getColumn(1).setMaxWidth(200);
        tMetadata.getColumnModel().getColumn(1).setMinWidth(200);
        //tMetadata.getColumnModel().getColumn(2).setCellRenderer(new WordWrapCellRenderer());
        
        spMetadata.setViewportView(tMetadata);
        getContentPane().setLayout(null);
        getContentPane().add(TabPanel);
        getContentPane().add(TabThumb);
        getContentPane().add(TabConfig);
        getContentPane().add(TabAnalysis);
        
        loadingBar = new JProgressBar();
        loadingBar.setStringPainted(true);
        loadingBar.setBounds(1020, 256, 244, 30);
        getContentPane().add(loadingBar);
        
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, s	tay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
			public void run() {
            	
                new Apps().setVisible(true);
                loadingBar.setString("Waiting");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTabbedPane TabConfig;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JLabel labELA;
    private javax.swing.JLabel labInput;
    private javax.swing.JLabel labMask;
    private javax.swing.JLabel labQuality;
    private javax.swing.JMenuItem mOpen;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPanel pConfELA;
    private javax.swing.JSlider sliderQuality;
    private JScrollPane spMetadata;
    private JTable tMetadata;
    private JMenuItem mntmSaveEla;
    private JMenuItem mntmSaveMaskedImage;
    private JLabel labValQ;
    private JLabel labComp;
    private JLabel labErrScale;
    private JSlider sliderErrScale;
    private JLabel lblFileSize;
    private JLabel lblResolution;
    private JLabel lblPath;
    private JLabel labResoVal;
    private JLabel labFileSizeVal;
    private JLabel labFileNameVal;
    private JTextArea txtaPath;
    private JLabel labThumbBig;
    private JPanel pStatisticsInput;
    private JLabel labFile;
    private JLabel labValE;
    private JPanel pConfMask;
    private JLabel labMaskThresh;
    private JLabel labValT;
    private JSlider sliderThresh;
    private JLabel lblMaskColor;
    private JButton btnConfMask;
    private JButton btnDefMask;
    private JComboBox<ComboItem> comboMaskCol;
    private JTabbedPane TabThumb;
    private JLabel labThumbSmall;
    private JLabel lblThumbnail;
    private JLabel labThumbStatus;
    private JLabel lblThumbSize;
    private JLabel labThumbBytes;
    private JLabel lblMinChannel;
    private static  JLabel labInMinR;
    private static  JLabel labInMaxR;
    private JLabel lblMaxChannelr;
    private JLabel lblMinMagnitude;
    private static  JLabel labInMinB;
    private static  JLabel labInAvgMag;
    private JLabel label_15;
    private JLabel label_1;
    private static  JLabel labInMinMag;
    private JLabel label_11;
    private static  JLabel labInMaxMag;
    private JLabel label;
    private JLabel label_20;
    private JLabel labIn;
    private static  JLabel labInMaxG;
    private static  JLabel labInMaxB;
    private static JLabel labInMinG;
    private JLabel lblAverageValuer;
    private static JLabel labInAvgR;
    private static JLabel labInAvgG;
    private static JLabel labInAvgB;
    private JPanel panel;
    private JLabel label_2;
    private static JLabel labRecMinR;
    private static JLabel labRecMaxR;
    private JLabel label_5;
    private JLabel label_6;
    private static JLabel labRecMinB;
    private static JLabel labRecAvgMag;
    private JLabel label_9;
    private JLabel label_10;
    private static JLabel labRecMinMag;
    private JLabel label_13;
    private static JLabel labRecMaxMag;
    private JLabel label_16;
    private JLabel label_17;
    private JLabel label_18;
    private static JLabel labRecMaxG;
    private static JLabel labRecMaxB;
    private static JLabel labRecMinG;
    private JLabel label_23;
    private static JLabel labRecAvgR;
    private static JLabel labRecAvgG;
    private static JLabel labRecAvgB;
    private JPanel pStatisticsELA;
    private JLabel label_27;
    private static  JLabel labElaMinR;
    private static  JLabel labElaMaxR;
    private JLabel label_30;
    private JLabel label_31;
    private static  JLabel labElaMinB;
    private static  JLabel labElaAvgMag;
    private JLabel label_34;
    private JLabel label_35;
    private static  JLabel labElaMinMag;
    private JLabel label_37;
    private static JLabel labElaMaxMag;
    private JLabel label_39;
    private JLabel label_40;
    private JLabel label_41;
    private static  JLabel labElaMaxG;
    private static  JLabel labElaMaxB;
    private static  JLabel labElaMinG;
    private JLabel label_45;
    private static  JLabel labElaAvgR;
    private static  JLabel labElaAvgB;
    private static  JLabel labElaAvgG;
    private JMenuItem mntmSaveRecomp;
    private JMenuItem mntmSaveMetadata;
    private static JProgressBar loadingBar;
    private JMenuItem mntmSaveThumbnail;
    private JSeparator separator;
    
    /**
     * Application Methods
     */
    void mOpenIMG(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mOpenIMGActionPerformed
    	mntmSaveRecomp.setEnabled(false);
    	mntmSaveEla.setEnabled(false);
    	mntmSaveMaskedImage.setEnabled(false);
    	mntmSaveMetadata.setEnabled(false);
    	mntmSaveThumbnail.setEnabled(false);
    	
        final JFileChooser fc = new JFileChooser();
        if(path != null) {
        	fc.setCurrentDirectory(new File(path));
        }
        
        fc.setFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));
        int result = fc.showOpenDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	clearTemp();
        	
            input = fc.getSelectedFile();
            path = input.getAbsolutePath();
            
            try {
            	imgFormat = FilenameUtils.getExtension(input.getName());
            	FileUtils.copyFile(input, new File("data/input."+imgFormat));
            	//FileUtils.copyFile(input, new File("data/input."+imgFormat));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            
            try {
                imgInput = ImageIO.read(input);
                applyConfigELA();                
            } catch (IOException | ImageProcessingException ex) {
                Logger.getLogger(Apps.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
            	DefaultTableModel tablemodel = null;
            	metadata = ImageMetadataReader.readMetadata(input);
                writeTable(metadata, tMetadata, tablemodel);
            } catch (IOException | ImageProcessingException ex) {
                Logger.getLogger(Apps.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            chkThumb();
            setThumb();
            if(thumbExists == true) {
            	labThumbStatus.setText("Available");
            	labThumbBytes.setText(thumbLen + " bytes");
            	mntmSaveThumbnail.setEnabled(true);
            }else {
            	labThumbStatus.setText("Not Available");
            	labThumbBytes.setText("-");
            	mntmSaveThumbnail.setEnabled(false);
            }
            txtaPath.setText(input.getPath());
            labFileNameVal.setText(input.getName());
            labFileSizeVal.setText(formatSize(input.length()));
            labResoVal.setText(imgInput.getWidth() + " x " + imgInput.getHeight());
            
            callGC();
        }
    }//GEN-LAST:event_mOpenIMGActionPerformed
        
    void mSaveRecompIMG(ActionEvent evt) {
    	final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("JPG Image (JPG)", "jpg"));
        int result = fc.showSaveDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	try {
				FileUtils.copyFile(new File("data/recompressed.jpg"), new File(fc.getSelectedFile()+".jpg"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(null, "Unexpected error occured when trying to save recompressed image.");
			}
        }
    }
    
    void mSaveElaIMG(ActionEvent evt) {
    	final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("JPG Image (JPG)", "jpg"));
        int result = fc.showSaveDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	try {
				FileUtils.copyFile(new File("data/ELA.jpg"), new File(fc.getSelectedFile()+".jpg"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(null, "Unexpected error occured when trying to save recompressed image.");
			}
        }
    }
    
    void mSaveMaskedIMG(ActionEvent evt) {
    	final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("JPG Image (JPG)", "jpg"));
        int result = fc.showSaveDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	try {
				FileUtils.copyFile(new File("data/masked.jpg"), new File(fc.getSelectedFile()+".jpg"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(null, "Unexpected error occured when trying to save recompressed image.");
			}
        }
    }
    
    void mSaveThumbIMG(ActionEvent evt) {
    	final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("JPG Image (JPG)", "jpg"));
        int result = fc.showSaveDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	try {
				FileUtils.copyFile(new File("data/thumbnail.jpg"), new File(fc.getSelectedFile()+".jpg"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				JOptionPane.showMessageDialog(null, "Unexpected error occured when trying to save recompressed image.");
			}
        }
    }
    
    void mSaveMetadata(ActionEvent evt) {
    	final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Tab Separated Values (TSV)", "tsv"));
        int result = fc.showSaveDialog(MenuBar);
        if (result == JFileChooser.APPROVE_OPTION) {
        	toExcel(tMetadata, new File(fc.getSelectedFile()+".tsv"));
        }
    }
    

	public void toExcel(JTable table, File file){
	    try{
	        TableModel model = table.getModel();
	        FileWriter excel = new FileWriter(file);
	
	        for(int i = 0; i < model.getColumnCount(); i++){
	            excel.write(model.getColumnName(i) + "\t");
	        }
	
	        excel.write("\n");
	
	        for(int i=0; i< model.getRowCount(); i++) {
	            for(int j=0; j < model.getColumnCount(); j++) {
	                excel.write(model.getValueAt(i,j).toString()+"\t");
	            }
	            excel.write("\n");
	        }
	
	        excel.close();
	
	    }catch(IOException e){ System.out.println(e); }
	}

    
    /*
     *	Application methods
     */
    public void writeTable(Metadata metadata, JTable tMetadata, DefaultTableModel tmodel) throws ImageProcessingException, IOException {
    	tmodel = (DefaultTableModel) tMetadata.getModel();
    	tmodel.setRowCount(0);
    	TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tMetadata.getModel());
        tMetadata.setRowSorter(sorter);
        
        for (Directory directory : metadata.getDirectories()) {
            for (Tag tag : directory.getTags()) {
            	tmodel.addRow(new Object[]{directory.getName(), tag.getTagName(), tag.getDescription()});
            }
        }
        mntmSaveMetadata.setEnabled(true);
    }    
    
    private void runStart() throws IOException, ImageProcessingException{  
    	
        imgWidth = imgInput.getWidth();        
        imgHeight = imgInput.getHeight();
        double ratio = 0;
        
        if(imgWidth > labWidth && imgWidth > imgHeight) {
        	ratio = ((double) labWidth) / ((double) imgWidth);
        	imgWidth = (int) (imgWidth * ratio);
        	imgHeight = (int) (imgHeight * ratio);
        }
        
        if(imgHeight > labHeight){
        	ratio = ((double) labHeight) / ((double) imgHeight);
        	imgWidth = (int) (imgWidth * ratio);
        	imgHeight = (int) (imgHeight * ratio);
        }
        
        img = imgInput.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        imgIco = new ImageIcon(img);
        labInput.setIcon(imgIco);
    }
    
    private void runRecomp() throws IOException {
        imgRecomp = ImageELA.GetCompressedImage(imgInput, (float) qualityLevel / 100);
        img = imgRecomp.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        imgIco = new ImageIcon(img);
        labComp.setIcon(imgIco);
        outputfile = new File("data/recompressed.jpg");
        //outputfile = new File("data/recompressed."+imgFormat);
        ImageIO.write(imgRecomp, "jpg", outputfile);
        mntmSaveRecomp.setEnabled(true);
    }
    
    private void runELA() throws IOException {
         imgELA = ImageELA.GetDifferenceImage(imgInput, imgRecomp, errLevel);
         img = imgELA.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
         imgIco = new ImageIcon(img);
         labELA.setIcon(imgIco);
         outputfile = new File("data/ELA.jpg");
         //outputfile = new File("data/ELA."+imgFormat);
         ImageIO.write(imgELA, "jpg", outputfile);
         mntmSaveEla.setEnabled(true);
    }
     
    private void runMask() throws IOException {
    	imgMask = ImageMask.MaskImages(imgInput, imgELA, MASK_RGB, maskThreshold, errLevel);
        img = imgMask.getScaledInstance(imgWidth, imgHeight, Image.SCALE_SMOOTH);
        imgIco = new ImageIcon(img);
        labMask.setIcon(imgIco);
        outputfile = new File("data/masked.jpg");
        ImageIO.write(imgMask, "jpg", outputfile);
        mntmSaveMaskedImage.setEnabled(true);
    }
    
    public void updQVal() {
    	qualityLevel = sliderQuality.getValue();
    	sliderQuality.setToolTipText(String.valueOf(sliderQuality.getValue()));   	
    	labValQ.setText(String.valueOf(sliderQuality.getValue())+"%");
    }
    
    public void updErrVal() {
    	errLevel = sliderErrScale.getValue();
    	sliderErrScale.setToolTipText(String.valueOf(sliderErrScale.getValue()));   	
    	labValE.setText(String.valueOf(sliderErrScale.getValue())+"%");
    }
    
    public void updTVal() {
    	maskThreshold = sliderThresh.getValue();
    	sliderThresh.setToolTipText(String.valueOf(sliderThresh.getValue()));   	
    	labValT.setText(String.valueOf(sliderThresh.getValue()));
    }
    
    public void applyConfigELA() throws ImageProcessingException, IOException {
    	if(input != null) {
    		loadingBar.setIndeterminate(true);
    		labELA.setIcon(null);
    		taskType = 1;
    		taskEla = new Task();
    		taskEla.execute();
    	}
    }
    
    public void defConfigELA() {
    	sliderQuality.setValue(95);
    	sliderErrScale.setValue(20);
    	if(input != null) {
    		loadingBar.setIndeterminate(true);
    		taskType = 1;
    		taskEla = new Task();
    		taskEla.execute();
    	}
    }
    
    public void applyMask() {
    	if(input != null) {
    		loadingBar.setIndeterminate(true);
    		taskType = 2;
    		taskMask = new Task();
    		taskMask.execute();    		
        	//runMask();
    	}
    }
    
    public void defMask() {
    	if(input != null) {
    		loadingBar.setIndeterminate(true);
	    	sliderThresh.setValue(25);
	    	taskType = 2;
    		taskMask = new Task();
    		taskMask.execute();
	    	//runMask();
    	}
    }
        
    
    public String formatSize(long bytes) {
        NumberFormat nf = NumberFormat.getNumberInstance(Locale.ITALY);
        
        nf.setMaximumFractionDigits(2);
        nf.setMinimumFractionDigits(0);
        String format = bytes + " Bytes";
        if (bytes / MEGA_BYTES > 0) {
            format = nf.format(bytes) + " bytes (" + nf.format((double) bytes / MEGA_BYTES) + " MB)";
        } else if (bytes / KILO_BYTES > 0) {
            format = nf.format(bytes) + " bytes (" + nf.format((double) bytes / KILO_BYTES) + " KB)";
        } else {
            format = nf.format(bytes) + " Bytes";
        }

        return format;
    }
    

    public void chkThumb() {
    	thumbExists = false;
    	
    	if(metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class) != null &&
    			metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_THUMBNAIL_OFFSET) != null &&
    			metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_THUMBNAIL_LENGTH) != null &&
    			metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_THUMBNAIL_OFFSET) != 0 &&
    			metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_THUMBNAIL_LENGTH) != 0){
    		thumbExists = true;
    		thumbWidth = metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_X_RESOLUTION);
    		thumbHeight = metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_Y_RESOLUTION);
    		thumbLen = metadata.getFirstDirectoryOfType(ExifThumbnailDirectory.class).getInteger(ExifThumbnailDirectory.TAG_THUMBNAIL_LENGTH);
    	}
    }
    

    public void setThumb() {
    	if(thumbExists == true) {
    		try {
    			labThumbSmall.setText(null);
        		labThumbBig.setText(null);
				imgThumb = ImageIO.read(new File("data/thumbnail.jpg"));
				
				double ratio = 0;
				if(imgThumb.getWidth() > imgThumb.getHeight()) {
					ratio = ((double) labHeight) / ((double) imgThumb.getHeight());
				}else {
					ratio = ((double) labWidth) / ((double) imgThumb.getWidth());
				}
				System.out.println(imgThumb.getWidth());
				System.out.println(labWidth);
				System.out.println(imgThumb.getHeight());
				System.out.println(labHeight);
				System.out.println(ratio);
				
	        	int thumbScaleWidth = (int) (imgThumb.getWidth() * ratio);
	        	int thumbScaleHeight = (int) (imgThumb.getHeight() * ratio);
	        	
	        	img = imgThumb.getScaledInstance(labThumbSmall.getWidth(), labThumbSmall.getHeight(), Image.SCALE_SMOOTH);
		        imgIco = new ImageIcon(img);
		        labThumbSmall.setIcon(imgIco);        
		        
		        img = imgThumb.getScaledInstance(thumbScaleWidth, thumbScaleHeight, Image.SCALE_SMOOTH);
		        imgIco = new ImageIcon(img);
		        labThumbBig.setIcon(imgIco);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}else {
    		labThumbBig.setIcon(null);
    		labThumbSmall.setIcon(null);
    		labThumbSmall.setText("Thumbnail metadata is not exists.");
    		labThumbBig.setText("Thumbnail comparison is not available.");
    	}
    }
    
    
    public void clearTemp(){
    	if(outputfile != null) {
    		File dir = outputfile.getParentFile();
        	for(File file: dir.listFiles()) 
        	    if (!file.isDirectory()) 
        	        file.delete();
    	}
    }

    public static void setInputStats(int[] minparams, int[] maxparams, int[] mag, float[] avgparams, float avgmag) {
    	labInMinR.setText(minparams[0]+"");
    	labInMinG.setText(minparams[1]+"");
    	labInMinB.setText(minparams[2]+"");
    	
    	labInMaxR.setText(maxparams[0]+"");
    	labInMaxG.setText(maxparams[1]+"");
    	labInMaxB.setText(maxparams[2]+"");
    	
    	labInMinMag.setText(mag[0]+"");
    	labInMaxMag.setText(mag[1]+"");
    	
    	labInAvgR.setText(avgparams[0]+"");
    	labInAvgG.setText(avgparams[1]+"");
    	labInAvgB.setText(avgparams[2]+"");
    	
    	labInAvgMag.setText(avgmag+"");
    }
    
    
    public static void setRecompStats(int[] minparams, int[] maxparams, int[] mag, float[] avgparams, float avgmag) {
    	labRecMinR.setText(minparams[0]+"");
    	labRecMinG.setText(minparams[1]+"");
    	labRecMinB.setText(minparams[2]+"");
    	
    	labRecMaxR.setText(maxparams[0]+"");
    	labRecMaxG.setText(maxparams[1]+"");
    	labRecMaxB.setText(maxparams[2]+"");
    	
    	labRecMinMag.setText(mag[0]+"");
    	labRecMaxMag.setText(mag[1]+"");
    	
    	labRecAvgR.setText(avgparams[0]+"");
    	labRecAvgG.setText(avgparams[1]+"");
    	labRecAvgB.setText(avgparams[2]+"");
    	
    	labRecAvgMag.setText(avgmag+"");
    }
    
    
    public static void setElaStats(int[] minparams, int[] maxparams, int[] mag, float[] avgparams, float avgmag) {
    	labElaMinR.setText(minparams[0]+"");
    	labElaMinG.setText(minparams[1]+"");
    	labElaMinB.setText(minparams[2]+"");
    	
    	labElaMaxR.setText(maxparams[0]+"");
    	labElaMaxG.setText(maxparams[1]+"");
    	labElaMaxB.setText(maxparams[2]+"");
    	labElaMaxR.setToolTipText(maxparams[0]+"");
    	labElaMaxG.setToolTipText(maxparams[1]+"");
    	labElaMaxB.setToolTipText(maxparams[2]+"");
    	
    	labElaMinMag.setText(mag[0]+"");
    	labElaMaxMag.setText(mag[1]+"");
    	labElaMaxMag.setToolTipText(mag[1]+"");
    	
    	labElaAvgR.setText(avgparams[0]+"");
    	labElaAvgG.setText(avgparams[1]+"");
    	labElaAvgB.setText(avgparams[2]+"");
    	
    	labElaAvgMag.setText(avgmag+"");
    }
 
    public void maskColorChange() {
    	Object item = comboMaskCol.getSelectedItem();
    	MASK_RGB = ((ComboItem)item).getValue();
    }
    
    public void callGC() {
    	System.gc();
    }
    
    class Task extends SwingWorker<Void, String> {
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() throws ImageProcessingException, IOException {
        	if(taskType == 1) {
        		runStart();
        		loadingBar.setString("Building Recompressed Image");
        		setTitle("Digital Image Forensics Tools (Status: Rebuilding Image @ "+qualityLevel+"% Quality Level...)");
        		runRecomp();
        		loadingBar.setString("Processing ELA Image");
        		setTitle("Digital Image Forensics Tools (Status: Processing Error Level Analysis @ "+errLevel+" Error Scale...)");
        		runELA();
        		
        		sliderThresh.setValue((int) Float.parseFloat(labElaAvgMag.getText()));
        		loadingBar.setString("Processing Image Mask");
        		setTitle("Digital Image Forensics Tools (Status: Processing Image Mask...)");
        		runMask();
        	}else if (taskType == 2){
        		loadingBar.setString("Processing Image Mask");
        		setTitle("Digital Image Forensics Tools (Status: Processing Image Mask...)");
        		runMask();
        	}
            return null;
        }
        
        /*
         * Executed in event dispatching thread
         */
        
        @Override
        public void done() {
        	loadingBar.setIndeterminate(false);
        	loadingBar.setValue(100);
        	loadingBar.setString("Completed");
            taskType = 0;
            callGC();
            setTitle("Digital Image Forensics Tools (Completed: "+input.getName()+")");
        }
    }
    
}